package com.green.java.ch06; //5월 2일 1번.

public class ObjectStudy1 {

    public static void main(String[] args) {
        // 클래스(class): 붕어빵으로 따지면 붕어빵을 만들기위한 틀 또는 설계도라고 생각하면된다.
        // 객체(object): (인스턴스, Instance)클래스로 만든 실제(실제 내용이 메모리에 올라가서 동작을 하면 그것이 바로 실체)-붕어빵.
        // 지금까지는 main 메소드만 이용했지만 이제는 다른 메소드도 이용한다.
        // 객체는 2가지 구성요소로 이뤄져있다. 멤버필드(변수, 상수), 멤버메소드
        // 멤버필드는 명사 담당이다. 값을 저장할수있다.
        // 멤버메소드는 동사 담당이다. 동작담당을 하고 있다.
        // e.g. 게임 캐릭터를 만들었다고 치자 그 캐릭터의 멤버필드는 직업 , 이름 , 레벨, hp,mp,스테미너 등등 (값 저장할수있것들으 멤버필드라고 한다.)
        // 멤버 메소드는 동사이므로 이동한다, 아이템을 줍는다. 아이템을 버린다 공격한다등 동작을 의미하는것이 멤버 메소드 이다.

        // 객체지향은 현실과 비슷하게 하기 위해 만들어지 개념이다.
        // 차에서 핸들이 고장 나면 핸들만 고치는거나 핸들만 교체한다는 개념은 객체지향이고 절차지향은 전부다 고쳐야한다.
        // 큰프로젝트에서는 객체지향이 훨씬 좋지만 작은 프로젝트에서는 절차지향이 더 쉽게 사용된다. 물론 객체지향이 최고다.

        // Method(메소드), Function(함수) 사실 이 두개는 똑같은것이다.
        // 함수가 객체 안에있으면 메소드라고 불린다. 자바는 객체 밖에 함수를 쓸수가없다. 자바에서는 함수라는 단어를 쓰지 않는다.
        //객체안에 존재하면 메소드이고 객체 밖에 존재하면 함수 이다.
        // c언어에서는 메소드라는 개념이 없고 함수라고 표현한다.(객체가 없기때문에)
        // 자바는 메소드라고 표현한다.(자바는 무조건 객체안에서 메소드를 이용하기때문에 메소드라고 표현한다.)
        // 현실세계를 반영하기 위해 만든것이 바로오오오오 객체지향형식이다라고 생각하면된다.


    }
}
